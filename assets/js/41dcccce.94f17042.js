"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2406],{6444:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var n=r(5893),o=r(1151),i=r(4866),l=r(5162);const s={layout:"default",title:"PID",parent:"Docs",description:"",nav_order:6},a=void 0,c={id:"docs/pid",title:"PID",description:"",source:"@site/ez-template-docs/docs/pid.md",sourceDirName:"docs",slug:"/docs/pid",permalink:"/EZ-Template/next/docs/pid",draft:!1,unlisted:!1,editUrl:"https://github.com/EZ-Robotics/EZ-Template/tree/website/${versionDocsDirPath}/${docPath}/ez-template-docs/docs/pid.md",tags:[],version:"current",frontMatter:{layout:"default",title:"PID",parent:"Docs",description:"",nav_order:6},sidebar:"tutorialSidebar",previous:{title:"Drive Constructors",permalink:"/EZ-Template/next/docs/constructor"},next:{title:"PTO",permalink:"/EZ-Template/next/docs/pto"}},d={},u=[{value:"Constructors",id:"constructors",level:2},{value:"PID()",id:"pid",level:3},{value:"Functions",id:"functions",level:2},{value:"constants_set()",id:"constants_set",level:3},{value:"target_set()",id:"target_set",level:3},{value:"exit_condition_set()",id:"exit_condition_set",level:3},{value:"name_set()",id:"name_set",level:3},{value:"compute()",id:"compute",level:3},{value:"Exit Conditions",id:"exit-conditions",level:2},{value:"exit_output",id:"exit_output",level:3},{value:"No Motor",id:"no-motor",level:3},{value:"One Motor",id:"one-motor",level:3},{value:"Multiple Motors",id:"multiple-motors",level:3}];function p(e){const t={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"constructors",children:"Constructors"}),"\n",(0,n.jsx)(t.h3,{id:"pid",children:"PID()"}),"\n",(0,n.jsx)(t.p,{children:"Creates a PID object with constants.  Everything past kP has a default starting value, so you can just put kP."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"p"})," kP",(0,n.jsx)(t.br,{}),"\n",(0,n.jsx)(t.code,{children:"i"})," kI",(0,n.jsx)(t.br,{}),"\n",(0,n.jsx)(t.code,{children:"d"})," kD",(0,n.jsx)(t.br,{}),"\n",(0,n.jsx)(t.code,{children:"p_start_i"})," i will start when error is within this\r\n",(0,n.jsx)(t.code,{children:"name"})," a string for the name of the PID"]}),"\n",(0,n.jsxs)(i.Z,{groupId:"ex2",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,n.jsx)(l.Z,{value:"example",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:'PID liftPID{1, 0.003, 4, 100, "Lift"};\n'})})}),(0,n.jsx)(l.Z,{value:"proto",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:'PID(double p, double i = 0, double d = 0, double start_i = 0, std::string name = "");\n'})})})]}),"\n",(0,n.jsx)(t.h2,{id:"functions",children:"Functions"}),"\n",(0,n.jsx)(t.h3,{id:"constants_set",children:"constants_set()"}),"\n",(0,n.jsx)(t.p,{children:"Sets PID constants."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"p"})," kP",(0,n.jsx)(t.br,{}),"\n",(0,n.jsx)(t.code,{children:"i"})," kI",(0,n.jsx)(t.br,{}),"\n",(0,n.jsx)(t.code,{children:"d"})," kD",(0,n.jsx)(t.br,{}),"\n",(0,n.jsx)(t.code,{children:"p_start_i"})," i will start when error is within this"]}),"\n",(0,n.jsxs)(i.Z,{groupId:"ex3",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,n.jsx)(l.Z,{value:"example",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"PID liftPID;\r\nvoid initialize() {\r\n  liftPID.constants_set(1, 0, 4);\r\n}\n"})})}),(0,n.jsx)(l.Z,{value:"proto",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"void constants_set(double p, double i = 0, double d = 0, double p_start_i = 0);\n"})})})]}),"\n",(0,n.jsx)(t.h3,{id:"target_set",children:"target_set()"}),"\n",(0,n.jsx)(t.p,{children:"Sets PID target."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"target"})," the goal position for your subsystem"]}),"\n",(0,n.jsxs)(i.Z,{groupId:"ex4",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,n.jsx)(l.Z,{value:"example",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:'PID liftPID{1, 0.003, 4, 100, "Lift"};  \r\npros::Motor lift_motor(1);\r\nvoid opcontrol() {\r\n  while (true) {\r\n    if (master.get_digital(DIGITAL_L1)) {\r\n      liftPID.target_set(500);\r\n    }\r\n    else if (master.get_digital(DIGITAL_L2)) {\r\n      liftPID.target_set(0);\r\n    }\r\n    lift_motor = liftPID.compute(lift_motor.get_position());\r\n\r\n    pros::delay(ez::util::DELAY_TIME);\r\n  }\r\n}\n'})})}),(0,n.jsx)(l.Z,{value:"proto",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"void target_set(double input);\n"})})})]}),"\n",(0,n.jsx)(t.h3,{id:"exit_condition_set",children:"exit_condition_set()"}),"\n",(0,n.jsxs)(t.p,{children:["Sets the exit condition constants.  To disable one of the conditions, set the constants relating to it to ",(0,n.jsx)(t.code,{children:"0"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"p_small_exit_time"})," time, in ms, before exiting ",(0,n.jsx)(t.code,{children:"p_small_error"}),(0,n.jsx)(t.br,{}),"\n",(0,n.jsx)(t.code,{children:"p_small_error"})," small error threshold",(0,n.jsx)(t.br,{}),"\n",(0,n.jsx)(t.code,{children:"p_big_exit_time"})," time, in ms, before exiting ",(0,n.jsx)(t.code,{children:"p_big_error"}),(0,n.jsx)(t.br,{}),"\n",(0,n.jsx)(t.code,{children:"p_big_error"})," big error threshold",(0,n.jsx)(t.br,{}),"\n",(0,n.jsx)(t.code,{children:"p_velocity_exit_time"})," time, in ms, for velocity to be 0",(0,n.jsx)(t.br,{}),"\n",(0,n.jsx)(t.code,{children:"p_mA_timeout"})," time, in ms, for ",(0,n.jsx)(t.code,{children:"is_over_current"})," to be true"]}),"\n",(0,n.jsxs)(i.Z,{groupId:"ex5",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,n.jsx)(l.Z,{value:"example",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:'PID liftPID{1, 0.003, 4, 100, "Lift"};  \r\nvoid initialize() {\r\n  liftPID.exit_condition_set(100, 3, 500, 7, 500, 500);\r\n}\n'})})}),(0,n.jsx)(l.Z,{value:"proto",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"void exit_condition_set(int p_small_exit_time, double p_small_error, int p_big_exit_time = 0, double p_big_error = 0, int p_velocity_exit_time = 0, int p_mA_timeout = 0);\n"})})})]}),"\n",(0,n.jsx)(t.h3,{id:"name_set",children:"name_set()"}),"\n",(0,n.jsx)(t.p,{children:"A string that prints when exit conditions are met.  When you have multiple mechanisms using exit conditions and you're debugging, seeing which exit condition is doing what can be useful."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"name"})," a string for the name of the PID"]}),"\n",(0,n.jsxs)(i.Z,{groupId:"ex6",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,n.jsx)(l.Z,{value:"example",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:'PID liftPID{1, 0.003, 4, 100};\r\nvoid initialize() {\r\n  liftPID.name_set("Lift");\r\n}  \n'})})}),(0,n.jsx)(l.Z,{value:"proto",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"void name_set(std::string name);\n"})})})]}),"\n",(0,n.jsx)(t.h3,{id:"compute",children:"compute()"}),"\n",(0,n.jsx)(t.p,{children:"Computes PID."}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"current"})," the current sensor value for the subsystem"]}),"\n",(0,n.jsxs)(i.Z,{groupId:"ex7",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,n.jsx)(l.Z,{value:"example",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:'PID liftPID{1, 0.003, 4, 100, "Lift"};  \r\npros::Motor lift_motor(1);\r\nvoid opcontrol() {\r\n  while (true) {\r\n    if (master.get_digital(DIGITAL_L1)) {\r\n      liftPID.target_set(500);\r\n    }\r\n    else if (master.get_digital(DIGITAL_L2)) {\r\n      liftPID.target_set(0);\r\n    }\r\n    lift_motor = liftPID.compute(lift_motor.get_position());\r\n\r\n    pros::delay(ez::util::DELAY_TIME);\r\n  }\r\n}\n'})})}),(0,n.jsx)(l.Z,{value:"proto",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"double compute(double current);\n"})})})]}),"\n",(0,n.jsx)(t.h2,{id:"exit-conditions",children:"Exit Conditions"}),"\n",(0,n.jsx)(t.p,{children:"Exit conditions are a series of things that need to happen for you to know your subsystem has arrived at the desired target."}),"\n",(0,n.jsx)(t.h3,{id:"exit_output",children:"exit_output"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:".exit_condition()"})," function can return any of the following variables depending on what triggered it to exit."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"enum exit_output { RUNNING = 1,\r\n                   SMALL_EXIT = 2,\r\n                   BIG_EXIT = 3,\r\n                   VELOCITY_EXIT = 4,\r\n                   mA_EXIT = 5,\r\n                   ERROR_NO_CONSTANTS = 6 };\n"})}),"\n",(0,n.jsx)(t.h3,{id:"no-motor",children:"No Motor"}),"\n",(0,n.jsxs)(t.p,{children:["Exit conditions without a motor will check if the error is small for X amount of time, if error is a little bigger for Y amount of time, or if velocity is 0 for Z amount of time, if you have constants enabled for them in ",(0,n.jsx)(t.a,{href:"https://ez-robotics.github.io/EZ-Template/docs/pid#exit_condition_set",children:"exit_condition_set()"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["Outputs one of the ",(0,n.jsx)(t.code,{children:"exit_output"})," states.  This exit condition checks ",(0,n.jsx)(t.code,{children:"small_error"}),", ",(0,n.jsx)(t.code,{children:"big_error"})," and ",(0,n.jsx)(t.code,{children:"velocity"})," if they are enabled."]}),"\n",(0,n.jsxs)(i.Z,{groupId:"ex8",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,n.jsx)(l.Z,{value:"example",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:'PID liftPID{1, 0.003, 4, 100, "Lift"};  \r\npros::Motor lift_motor(1);\r\n\r\nvoid initialize() {\r\n  liftPID.exit_condition_set(100, 3, 500, 7, 500, 500);\r\n}\r\n\r\nvoid autonomous() {\r\n  liftPID.target_set(500);\r\n  while (liftPID.exit_condition(true) == ez::RUNNING) {\r\n    lift_motor = liftPID.compute(lift_motor.get_position());\r\n    pros::delay(ez::util::DELAY_TIME);\r\n  }\r\n\r\n  liftPID.target_set(0);\r\n  while (liftPID.exit_condition(true) == ez::RUNNING) {\r\n    lift_motor = liftPID.compute(lift_motor.get_position());\r\n    pros::delay(ez::util::DELAY_TIME);\r\n  }\r\n}\n'})})}),(0,n.jsx)(l.Z,{value:"proto",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"ez::exit_output exit_condition(bool print = false);\n"})})})]}),"\n",(0,n.jsx)(t.h3,{id:"one-motor",children:"One Motor"}),"\n",(0,n.jsxs)(t.p,{children:["Exit conditions with a motor will check if the error is small for X amount of time, if error is a little bigger for Y amount of time, if velocity is 0 for Z amount of time, then they will check if the motor is pulling too many amps for A amount of time, only if you have constants enabled for them in ",(0,n.jsx)(t.a,{href:"https://ez-robotics.github.io/EZ-Template/docs/pid#exit_condition_set",children:"exit_condition_set()"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["Outputs one of the ",(0,n.jsx)(t.code,{children:"exit_output"})," states.  This exit condition checks ",(0,n.jsx)(t.code,{children:"small_error"}),", ",(0,n.jsx)(t.code,{children:"big_error"}),", ",(0,n.jsx)(t.code,{children:"velocity"})," and ",(0,n.jsx)(t.code,{children:"mA"})," if they are enabled."]}),"\n",(0,n.jsxs)(i.Z,{groupId:"ex9",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,n.jsx)(l.Z,{value:"example",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:'PID liftPID{1, 0.003, 4, 100, "Lift"};  \r\npros::Motor lift_motor(1);\r\n\r\nvoid initialize() {\r\n  liftPID.exit_condition_set(100, 3, 500, 7, 500, 500);\r\n}\r\n\r\nvoid autonomous() {\r\n  liftPID.target_set(500);\r\n  while (liftPID.exit_condition(lift_motor, true) == ez::RUNNING) {\r\n    lift_motor = liftPID.compute(lift_motor.get_position());\r\n    pros::delay(ez::util::DELAY_TIME);\r\n  }\r\n\r\n  liftPID.target_set(0);\r\n  while (liftPID.exit_condition(lift_motor, true) == ez::RUNNING) {\r\n    lift_motor = liftPID.compute(lift_motor.get_position());\r\n    pros::delay(ez::util::DELAY_TIME);\r\n  }\r\n}\n'})})}),(0,n.jsx)(l.Z,{value:"proto",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"ez::exit_output exit_condition(pros::Motor sensor, bool print = false);\n"})})})]}),"\n",(0,n.jsx)(t.h3,{id:"multiple-motors",children:"Multiple Motors"}),"\n",(0,n.jsx)(t.p,{children:"This checks the same thing as one motor, except it will check through multiple motors instead of 1.  If any of the motors are pulling too many amps the function will start the timer for mA."}),"\n",(0,n.jsxs)(t.p,{children:["Outputs one of the ",(0,n.jsx)(t.code,{children:"exit_output"})," states.  This exit condition checks ",(0,n.jsx)(t.code,{children:"small_error"}),", ",(0,n.jsx)(t.code,{children:"big_error"}),", ",(0,n.jsx)(t.code,{children:"velocity"})," and ",(0,n.jsx)(t.code,{children:"mA"})," if they are enabled.  When any of the motors trip ",(0,n.jsx)(t.code,{children:"mA"}),", it returns ",(0,n.jsx)(t.code,{children:"mA_EXIT"}),"."]}),"\n",(0,n.jsxs)(i.Z,{groupId:"ex10",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,n.jsx)(l.Z,{value:"example",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:'PID liftPID{1, 0.003, 4, 100, "Lift"};  \r\npros::Motor l_lift_motor(1);\r\npros::Motor r_lift_motor(2, true);\r\n\r\nvoid set_lift(int input) {\r\n  l_lift_motor = input;\r\n  r_lift_motor = input;\r\n}\r\n\r\nvoid initialize() {\r\n  liftPID.exit_condition_set(100, 3, 500, 7, 500, 500);\r\n}\r\n\r\nvoid autonomous() {\r\n  liftPID.target_set(500);\r\n  while (liftPID.exit_condition({r_lift_motor, l_lift_motor}, true) == ez::RUNNING) {\r\n    set_lift(liftPID.compute(lift_motor.get_position()));\r\n    pros::delay(ez::util::DELAY_TIME);\r\n  }\r\n\r\n  liftPID.target_set(0);\r\n  while (liftPID.exit_condition({r_lift_motor, l_lift_motor}, true) == ez::RUNNING) {\r\n    set_lift(liftPID.compute(lift_motor.get_position()));\r\n    pros::delay(ez::util::DELAY_TIME);\r\n  }\r\n}\n'})})}),(0,n.jsx)(l.Z,{value:"proto",children:(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-cpp",children:"ez::exit_output exit_condition(std::vector<pros::Motor> sensor, bool print = false);\n"})})})]})]})}function h(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},5162:(e,t,r)=>{r.d(t,{Z:()=>l});r(7294);var n=r(6010);const o={tabItem:"tabItem_Ymn6"};var i=r(5893);function l(e){let{children:t,hidden:r,className:l}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,n.Z)(o.tabItem,l),hidden:r,children:t})}},4866:(e,t,r)=>{r.d(t,{Z:()=>I});var n=r(7294),o=r(6010),i=r(2466),l=r(6550),s=r(469),a=r(1980),c=r(7392),d=r(12);function u(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:r}=e;return(0,n.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:r,attributes:n,default:o}}=e;return{value:t,label:r,attributes:n,default:o}}))}(r);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function h(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function x(e){let{queryString:t=!1,groupId:r}=e;const o=(0,l.k6)(),i=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,a._X)(i),(0,n.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(o.location.search);t.set(i,e),o.replace({...o.location,search:t.toString()})}),[i,o])]}function m(e){const{defaultValue:t,queryString:r=!1,groupId:o}=e,i=p(e),[l,a]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=r.find((e=>e.default))??r[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:i}))),[c,u]=x({queryString:r,groupId:o}),[m,f]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,i]=(0,d.Nk)(r);return[o,(0,n.useCallback)((e=>{r&&i.set(e)}),[r,i])]}({groupId:o}),_=(()=>{const e=c??m;return h({value:e,tabValues:i})?e:null})();(0,s.Z)((()=>{_&&a(_)}),[_]);return{selectedValue:l,selectValue:(0,n.useCallback)((e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);a(e),u(e),f(e)}),[u,f,i]),tabValues:i}}var f=r(2389);const _={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=r(5893);function v(e){let{className:t,block:r,selectedValue:n,selectValue:l,tabValues:s}=e;const a=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),d=e=>{const t=e.currentTarget,r=a.indexOf(t),o=s[r].value;o!==n&&(c(t),l(o))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=a.indexOf(e.currentTarget)+1;t=a[r]??a[0];break}case"ArrowLeft":{const r=a.indexOf(e.currentTarget)-1;t=a[r]??a[a.length-1];break}}t?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":r},t),children:s.map((e=>{let{value:t,label:r,attributes:i}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:n===t?0:-1,"aria-selected":n===t,ref:e=>a.push(e),onKeyDown:u,onClick:d,...i,className:(0,o.Z)("tabs__item",_.tabItem,i?.className,{"tabs__item--active":n===t}),children:r??t},t)}))})}function g(e){let{lazy:t,children:r,selectedValue:o}=e;const i=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===o));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:i.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==o})))})}function b(e){const t=m(e);return(0,j.jsxs)("div",{className:(0,o.Z)("tabs-container",_.tabList),children:[(0,j.jsx)(v,{...e,...t}),(0,j.jsx)(g,{...e,...t})]})}function I(e){const t=(0,f.Z)();return(0,j.jsx)(b,{...e,children:u(e.children)},String(t))}},1151:(e,t,r)=>{r.d(t,{Z:()=>s,a:()=>l});var n=r(7294);const o={},i=n.createContext(o);function l(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);
"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9445],{304:(t,e,i)=>{i.r(e),i.d(e,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=i(5893),n=i(1151);const o={title:"PID Tutorial",description:"How to add a feedback loop to motors and increase their accuracy"},l="PID Tutorial",s={id:"tutorials/pid",title:"PID Tutorial",description:"How to add a feedback loop to motors and increase their accuracy",source:"@site/versioned_docs/version-2.x/tutorials/pid.md",sourceDirName:"tutorials",slug:"/tutorials/pid",permalink:"/EZ-Template/tutorials/pid",draft:!1,unlisted:!1,editUrl:"https://github.com/EZ-Robotics/EZ-Template/tree/website/${versionDocsDirPath}/${docPath}/versioned_docs/version-2.x/tutorials/pid.md",tags:[],version:"2.x",frontMatter:{title:"PID Tutorial",description:"How to add a feedback loop to motors and increase their accuracy"},sidebar:"tutorialSidebar",previous:{title:"Joystick Curves",permalink:"/EZ-Template/tutorials/joystick_curve"},next:{title:"PTO Tutorial",permalink:"/EZ-Template/tutorials/pto_tutorial"}},a={},d=[{value:"Example 1 - User Control",id:"example-1---user-control",level:2},{value:"Example 2 - Waiting in Autonomous",id:"example-2---waiting-in-autonomous",level:2},{value:"Example 3 - Tasks",id:"example-3---tasks",level:2}];function c(t){const e={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,n.a)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"pid-tutorial",children:"PID Tutorial"}),"\n",(0,r.jsxs)(e.p,{children:["PID (proportion, integral, derivative) is a feedback controlled used to move something to a position.  The controller slows down as it approaches its target and will correct itself after overshoot occurs.  It is a relatively simply controller and can be very consistent with ",(0,r.jsx)(e.a,{href:"https://ez-robotics.github.io/EZ-Template/tutorials/tuning_constants",children:"tuning"}),"."]}),"\n",(0,r.jsx)(e.h2,{id:"example-1---user-control",children:"Example 1 - User Control"}),"\n",(0,r.jsxs)(e.p,{children:["This code uses a function called ",(0,r.jsx)(e.code,{children:"set_lift"})," to set the power of 2 lift motors in a single function call.  After ",(0,r.jsx)(e.code,{children:"liftPID"})," is created, in ",(0,r.jsx)(e.code,{children:"opcontrol()"})," we set the target depending on button presses.  To run the PID we have to run ",(0,r.jsx)(e.code,{children:"liftPID.compute(sensor value)"})," repeatedly to make sure our subsystem gets to its target.  We reset the lift encoder in ",(0,r.jsx)(e.code,{children:"initialize()"})," to make sure the motor is starting at a known position."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'pros::Motor l_lift(17);\r\npros::Motor r_lift(18);\r\nvoid set_lift(int input) {\r\n  l_lift = input;\r\n  r_lift = input;\r\n}\r\nPID liftPID{0.45, 0, 0, 0, "Lift"};\r\n\r\nvoid initialize() {\r\n  l_lift.tare_position();\r\n}\r\n\r\nvoid opcontrol() {\r\n  while (true) {\r\n    if (master.get_digital(DIGITAL_L1)) {\r\n      liftPID.set_target(500);\r\n    }\r\n    else if (master.get_digital(DIGITAL_L2)) {\r\n      liftPID.set_target(0);\r\n    }\r\n    set_lift(liftPID.compute(l_lift.get_position()));\r\n\r\n    pros::delay(ez::util::DELAY_TIME);\r\n  }\r\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"example-2---waiting-in-autonomous",children:"Example 2 - Waiting in Autonomous"}),"\n",(0,r.jsx)(e.p,{children:"This code uses the previous example as a base."}),"\n",(0,r.jsxs)(e.p,{children:["We've added a new function called ",(0,r.jsx)(e.code,{children:"lift_auto()"}),".  This function takes in a target and locks the code in a while loop until the lift has reached its target.  The autonomous routine will bring the lift up to 500, wait for 1 second, and then come back down to 0."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'pros::Motor l_lift(17);\r\npros::Motor r_lift(18);\r\nvoid set_lift(int input) {\r\n  l_lift = input;\r\n  r_lift = input;\r\n}\r\nPID liftPID{0.45, 0, 0, 0, "Lift"};\r\n\r\nvoid lift_auto(double target) {\r\n  liftPID.set_target(target);\r\n  ez::exit_output exit = ez::RUNNING;\r\n  while (liftPID.exit_condition({l_lift, r_lift}, true) == ez::RUNNING) {\r\n    double output = liftPID.compute(l_lift.get_position());\r\n    set_lift(output);\r\n    pros::delay(ez::util::DELAY_TIME);\r\n  }\r\n  set_lift(0);\r\n}\r\n\r\nvoid initialize() {\r\n  l_lift.tare_position();\r\n  liftPID.set_exit_condition(80, 50, 300, 150, 500, 500);\r\n}\r\n\r\nvoid autonomous() {\r\n  lift_auto(500);\r\n  pros::delay(1000);\r\n  lift_auto(0);\r\n}\r\n\r\nvoid opcontrol() {\r\n  while (true) {\r\n    if (master.get_digital(DIGITAL_L1)) {\r\n      liftPID.set_target(500);\r\n    }\r\n    else if (master.get_digital(DIGITAL_L2)) {\r\n      liftPID.set_target(0);\r\n    }\r\n    set_lift(liftPID.compute(l_lift.get_position()));\r\n\r\n    pros::delay(ez::util::DELAY_TIME);\r\n  }\r\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"example-3---tasks",children:"Example 3 - Tasks"}),"\n",(0,r.jsx)(e.p,{children:"Example 2 has a problem of not being able to do other things while the lift is running because the code is locked.  We can fix this with a task."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'pros::Motor l_lift(17);\r\npros::Motor r_lift(18);\r\nvoid set_lift(int input) {\r\n  l_lift = input;\r\n  r_lift = input;\r\n}\r\nPID liftPID{0.45, 0, 0, 0, "Lift"};\r\n\r\n\r\nvoid lift_wait() {\r\n  while (liftPID.exit_condition({l_lift, r_lift}, true) == ez::RUNNING) {\r\n    pros::delay(ez::util::DELAY_TIME);\r\n  }\r\n}\r\n\r\nvoid lift_task() {\r\n  pros::delay(2000);\r\n  while (true) {\r\n    set_lift(liftPID.compute(l_lift.get_position()));\r\n\r\n    pros::delay(ez::util::DELAY_TIME);\r\n  }\r\n}\r\npros::Task Lift_Task(lift_task);\r\n\r\nvoid initialize() {\r\n  l_lift.tare_position();\r\n  liftPID.set_exit_condition(80, 50, 300, 150, 500, 500);\r\n}\r\n\r\nvoid autonomous() {\r\n  liftPID.set_target(500);\r\n  lift_wait();\r\n\r\n  pros::delay(1000);\r\n\r\n  liftPID.set_target(0);\r\n  lift_wait();\r\n}\r\n\r\nvoid opcontrol() {\r\n  while (true) {\r\n    if (master.get_digital(DIGITAL_L1)) {\r\n      liftPID.set_target(500);\r\n    }\r\n    else if (master.get_digital(DIGITAL_L2)) {\r\n      liftPID.set_target(0);\r\n    }\r\n\r\n    pros::delay(ez::util::DELAY_TIME);\r\n  }\r\n}\n'})})]})}function u(t={}){const{wrapper:e}={...(0,n.a)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(c,{...t})}):c(t)}},1151:(t,e,i)=>{i.d(e,{Z:()=>s,a:()=>l});var r=i(7294);const n={},o=r.createContext(n);function l(t){const e=r.useContext(o);return r.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(n):t.components||n:l(t.components),r.createElement(o.Provider,{value:e},t.children)}}}]);
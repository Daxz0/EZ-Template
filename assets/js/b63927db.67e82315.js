"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[206],{3079:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var i=r(5893),n=r(1151);const o={title:"PID Tutorial",description:"How to add a feedback loop to motors and increase their accuracy"},l="PID Tutorial",a={id:"tutorials/pid",title:"PID Tutorial",description:"How to add a feedback loop to motors and increase their accuracy",source:"@site/ez-template-docs/tutorials/pid.md",sourceDirName:"tutorials",slug:"/tutorials/pid",permalink:"/EZ-Template/tutorials/pid",draft:!1,unlisted:!1,editUrl:"https://github.com/EZ-Robotics/EZ-Template/tree/main/website/ez-template-docs/tutorials/pid.md",tags:[],version:"current",frontMatter:{title:"PID Tutorial",description:"How to add a feedback loop to motors and increase their accuracy"},sidebar:"tutorialSidebar",previous:{title:"Joystick Curves",permalink:"/EZ-Template/tutorials/joystick_curve"},next:{title:"PTO Tutorial",permalink:"/EZ-Template/tutorials/pto_tutorial"}},s={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Example",id:"example",level:2}];function u(t){const e={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,n.a)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"pid-tutorial",children:(0,i.jsx)(e.strong,{children:"PID Tutorial"})}),"\n",(0,i.jsx)(e.h2,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsx)(e.p,{children:"PID (proportion, integral, derivative) is a feedback controlled used to move something to a position.  The controller slows down as it approaches its target.  It is a relatively simply controller and can be very consistent with tuning."}),"\n",(0,i.jsx)(e.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:'pros::Motor l_lift(17);\r\npros::Motor r_lift(18);\r\nvoid set_lift(int input) {\r\n  l_lift = input;\r\n  r_lift = input;\r\n}\r\nPID liftPID{0.45, 0, 0, 0, "Lift"};\r\n\r\n\r\nvoid lift_auto(double target) {\r\n  liftPID.set_target(target);\r\n  ez::exit_output exit = ez::RUNNING;\r\n  while (liftPID.exit_condition({l_lift, r_lift}, true) == ez::RUNNING) {\r\n    double output = liftPID.compute(l_lift.get_position());\r\n    set_lift(output);\r\n    pros::delay(ez::util::DELAY_TIME);\r\n  }\r\n  set_lift(0);\r\n}\r\n\r\nvoid initialize() {\r\n  liftPID.set_exit_condition(80, 50, 300, 150, 500, 500);\r\n}\r\n\r\nvoid autonomous() {\r\n  lift_auto(1000);\r\n}\r\n\r\nvoid opcontrol() {\r\n  while (true) {\r\n    if (master.get_digital(DIGITAL_L1)) {\r\n      liftPID.set_target(500);\r\n    }\r\n    else if (master.get_digital(DIGITAL_L2)) {\r\n      liftPID.set_target(0);\r\n    }\r\n    set_lift(liftPID.compute(l_lift.get_position()));\r\n\r\n    pros::delay(ez::util::DELAY_TIME);\r\n  }\r\n}\n'})})]})}function d(t={}){const{wrapper:e}={...(0,n.a)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(u,{...t})}):u(t)}},1151:(t,e,r)=>{r.d(e,{Z:()=>a,a:()=>l});var i=r(7294);const n={},o=i.createContext(n);function l(t){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function a(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(n):t.components||n:l(t.components),i.createElement(o.Provider,{value:e},t.children)}}}]);
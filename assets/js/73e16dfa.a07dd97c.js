"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[555],{9378:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var t=n(5893),a=n(1151),r=n(4866),l=n(5162);const i={layout:"default",title:"Slew",parent:"Docs",description:"",nav_order:4},d=void 0,o={id:"docs/slew",title:"Slew",description:"",source:"@site/ez-template-docs/docs/slew.md",sourceDirName:"docs",slug:"/docs/slew",permalink:"/EZ-Template/docs/slew",draft:!1,unlisted:!1,editUrl:"https://github.com/EZ-Robotics/EZ-Template/tree/website/${versionDocsDirPath}/${docPath}/ez-template-docs/docs/slew.md",tags:[],version:"current",frontMatter:{layout:"default",title:"Slew",parent:"Docs",description:"",nav_order:4},sidebar:"tutorialSidebar",previous:{title:"Drive and Telemetry",permalink:"/EZ-Template/docs/set_and_get_drive"},next:{title:"User Control",permalink:"/EZ-Template/docs/user_control"}},c={},u=[{value:"EZ-Template Slew Wrappers",id:"ez-template-slew-wrappers",level:2},{value:"slew_drive_constants_set()",id:"slew_drive_constants_set",level:3},{value:"slew_drive_constants_forward_set()",id:"slew_drive_constants_forward_set",level:3},{value:"slew_drive_constants_backward_set()",id:"slew_drive_constants_backward_set",level:3},{value:"slew_turn_constants_set()",id:"slew_turn_constants_set",level:3},{value:"slew_swing_constants_set()",id:"slew_swing_constants_set",level:3},{value:"slew_swing_constants_set()",id:"slew_swing_constants_set-1",level:3},{value:"slew_swing_constants_forward_set()",id:"slew_swing_constants_forward_set",level:3},{value:"slew_swing_constants_forward_set()",id:"slew_swing_constants_forward_set-1",level:3},{value:"slew_swing_constants_backward_set()",id:"slew_swing_constants_backward_set",level:3},{value:"slew_swing_constants_backward_set()",id:"slew_swing_constants_backward_set-1",level:3},{value:"Slew Class",id:"slew-class",level:2},{value:"slew()",id:"slew",level:3},{value:"constants_set()",id:"constants_set",level:3},{value:"initialize()",id:"initialize",level:3},{value:"iterate()",id:"iterate",level:3},{value:"output()",id:"output",level:3},{value:"enabled()",id:"enabled",level:3}];function _(e){const s={br:"br",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"ez-template-slew-wrappers",children:"EZ-Template Slew Wrappers"}),"\n",(0,t.jsx)(s.h3,{id:"slew_drive_constants_set",children:"slew_drive_constants_set()"}),"\n",(0,t.jsxs)(s.p,{children:["Sets constants for slew during drive forward motions.  This sets forward and backward constants.  Robot will start at ",(0,t.jsx)(s.code,{children:"min_speed"})," and will be at the maximum set speed once ",(0,t.jsx)(s.code,{children:"distance"})," is traveled."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"distance"})," is in an okapi distance unit.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.code,{children:"min_speed"})," is 0 to 127."]}),"\n",(0,t.jsxs)(r.Z,{groupId:"slew_backward_constant_set",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(l.Z,{value:"example",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"void autonomous() {\r\n  chassis.drive_imu_reset(); \r\n  chassis.drive_sensor_reset(); \r\n  chassis.drive_brake_set(MOTOR_BRAKE_HOLD); \r\n\r\n  chassis.slew_drive_constants_set(5_in, 50);\r\n\r\n  chassis.pid_drive_set(12_in, 110, true);\r\n  chassis.pid_wait();\r\n\r\n  chassis.pid_drive_set(-12_in, 110, true);\r\n  chassis.pid_wait();\r\n}\n"})})}),(0,t.jsx)(l.Z,{value:"proto",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"void slew_drive_constants_set(okapi::QLength distance, int min_speed);\n"})})})]}),"\n",(0,t.jsx)(s.h3,{id:"slew_drive_constants_forward_set",children:"slew_drive_constants_forward_set()"}),"\n",(0,t.jsxs)(s.p,{children:["Sets constants for slew during drive forward motions.  Robot will start at ",(0,t.jsx)(s.code,{children:"min_speed"})," and will be at the maximum set speed once ",(0,t.jsx)(s.code,{children:"distance"})," is traveled."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"distance"})," is in an okapi distance unit.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.code,{children:"min_speed"})," is 0 to 127."]}),"\n",(0,t.jsxs)(r.Z,{groupId:"slew_forward_constant_set",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(l.Z,{value:"example",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"void autonomous() {\r\n  chassis.drive_imu_reset(); \r\n  chassis.drive_sensor_reset(); \r\n  chassis.drive_brake_set(MOTOR_BRAKE_HOLD); \r\n\r\n  chassis.slew_drive_constants_forward_set(5_in, 50);\r\n\r\n  chassis.pid_drive_set(12_in, 110, true);\r\n  chassis.pid_wait();\r\n}\n"})})}),(0,t.jsx)(l.Z,{value:"proto",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"void slew_drive_constants_forward_set(okapi::QLength distance, int min_speed);\n"})})})]}),"\n",(0,t.jsx)(s.h3,{id:"slew_drive_constants_backward_set",children:"slew_drive_constants_backward_set()"}),"\n",(0,t.jsxs)(s.p,{children:["Sets constants for slew during drive forward motions.  Robot will start at ",(0,t.jsx)(s.code,{children:"min_speed"})," and will be at the maximum set speed once ",(0,t.jsx)(s.code,{children:"distance"})," is traveled."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"distance"})," is in an okapi distance unit.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.code,{children:"min_speed"})," is 0 to 127."]}),"\n",(0,t.jsxs)(r.Z,{groupId:"slew_backward_constant_set",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(l.Z,{value:"example",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"void autonomous() {\r\n  chassis.drive_imu_reset(); \r\n  chassis.drive_sensor_reset(); \r\n  chassis.drive_brake_set(MOTOR_BRAKE_HOLD); \r\n\r\n  chassis.slew_drive_constants_backward_set(5_in, 50);\r\n\r\n  chassis.pid_drive_set(-12_in, 110, true);\r\n  chassis.pid_wait();\r\n}\n"})})}),(0,t.jsx)(l.Z,{value:"proto",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"void slew_drive_constants_backward_set(okapi::QLength distance, int min_speed);\n"})})})]}),"\n",(0,t.jsx)(s.h3,{id:"slew_turn_constants_set",children:"slew_turn_constants_set()"}),"\n",(0,t.jsxs)(s.p,{children:["Sets constants for slew during turns.  Robot will start at ",(0,t.jsx)(s.code,{children:"min_speed"})," and will be at the maximum set speed once ",(0,t.jsx)(s.code,{children:"distance"})," is traveled."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"distance"})," is in an okapi angle unit.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.code,{children:"min_speed"})," is 0 to 127."]}),"\n",(0,t.jsxs)(r.Z,{groupId:"slew_turn_constant_set",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(l.Z,{value:"example",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"void autonomous() {\r\n  chassis.drive_imu_reset(); \r\n  chassis.drive_sensor_reset(); \r\n  chassis.drive_brake_set(MOTOR_BRAKE_HOLD); \r\n\r\n  chassis.slew_turn_constants_set(5_deg, 50);\r\n\r\n  chassis.pid_turn_set(-90_deg, 110, true);\r\n  chassis.pid_wait();\r\n}\n"})})}),(0,t.jsx)(l.Z,{value:"proto",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"void slew_turn_constants_set(okapi::QAngle distance, int min_speed);\n"})})})]}),"\n",(0,t.jsx)(s.h3,{id:"slew_swing_constants_set",children:"slew_swing_constants_set()"}),"\n",(0,t.jsxs)(s.p,{children:["Sets constants for slew during swing turns.  This sets forward and backwards constants.  Robot will start at ",(0,t.jsx)(s.code,{children:"min_speed"})," and will be at the maximum set speed once ",(0,t.jsx)(s.code,{children:"distance"})," is traveled."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"distance"})," is in an okapi length unit.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.code,{children:"min_speed"})," is 0 to 127."]}),"\n",(0,t.jsxs)(r.Z,{groupId:"slew_swing_constants_set_okapi_distance",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(l.Z,{value:"example",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"void autonomous() {\r\n  chassis.drive_imu_reset(); \r\n  chassis.drive_sensor_reset(); \r\n  chassis.drive_brake_set(MOTOR_BRAKE_HOLD); \r\n\r\n  chassis.slew_swing_constants_set(5_in, 50);\r\n\r\n  chassis.pid_swing_set(ez::LEFT_SWING, 90_deg, 110, 0, true);\r\n  chassis.pid_wait();\r\n}\n"})})}),(0,t.jsx)(l.Z,{value:"proto",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"void slew_swing_constants_set(okapi::QLength distance, int min_speed);\n"})})})]}),"\n",(0,t.jsx)(s.h3,{id:"slew_swing_constants_set-1",children:"slew_swing_constants_set()"}),"\n",(0,t.jsxs)(s.p,{children:["Sets constants for slew during swing turns.  This sets forward and backwards constants.  Robot will start at ",(0,t.jsx)(s.code,{children:"min_speed"})," and will be at the maximum set speed once ",(0,t.jsx)(s.code,{children:"distance"})," is traveled."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"distance"})," is in an okapi angle unit.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.code,{children:"min_speed"})," is 0 to 127."]}),"\n",(0,t.jsxs)(r.Z,{groupId:"slew_swing_constants_set_okapi_angle",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(l.Z,{value:"example",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"void autonomous() {\r\n  chassis.drive_imu_reset(); \r\n  chassis.drive_sensor_reset(); \r\n  chassis.drive_brake_set(MOTOR_BRAKE_HOLD); \r\n\r\n  chassis.slew_swing_constants_set(7_deg, 50);\r\n\r\n  chassis.pid_swing_set(ez::LEFT_SWING, 90_deg, 110, 0, true);\r\n  chassis.pid_wait();\r\n}\n"})})}),(0,t.jsx)(l.Z,{value:"proto",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"void slew_swing_constants_set(okapi::QAngle distance, int min_speed);\n"})})})]}),"\n",(0,t.jsx)(s.h3,{id:"slew_swing_constants_forward_set",children:"slew_swing_constants_forward_set()"}),"\n",(0,t.jsxs)(s.p,{children:["Sets constants for slew during forward swing turns.  Robot will start at ",(0,t.jsx)(s.code,{children:"min_speed"})," and will be at the maximum set speed once ",(0,t.jsx)(s.code,{children:"distance"})," is traveled."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"distance"})," is in an okapi length unit.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.code,{children:"min_speed"})," is 0 to 127."]}),"\n",(0,t.jsxs)(r.Z,{groupId:"slew_forward_swing_constants_set_okapi_distance",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(l.Z,{value:"example",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"void autonomous() {\r\n  chassis.drive_imu_reset(); \r\n  chassis.drive_sensor_reset(); \r\n  chassis.drive_brake_set(MOTOR_BRAKE_HOLD); \r\n\r\n  chassis.slew_swing_constants_forward_set(5_in, 50);\r\n\r\n  chassis.pid_swing_set(ez::LEFT_SWING, 90_deg, 110, 0, true);\r\n  chassis.pid_wait();\r\n}\n"})})}),(0,t.jsx)(l.Z,{value:"proto",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"void slew_swing_constants_forward_set(okapi::QLength distance, int min_speed);\n"})})})]}),"\n",(0,t.jsx)(s.h3,{id:"slew_swing_constants_forward_set-1",children:"slew_swing_constants_forward_set()"}),"\n",(0,t.jsxs)(s.p,{children:["Sets constants for slew during forward swing turns.  Robot will start at ",(0,t.jsx)(s.code,{children:"min_speed"})," and will be at the maximum set speed once ",(0,t.jsx)(s.code,{children:"distance"})," is traveled."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"distance"})," is in an okapi angle unit.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.code,{children:"min_speed"})," is 0 to 127."]}),"\n",(0,t.jsxs)(r.Z,{groupId:"slew_forward_swing_constants_set_okapi_angle",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(l.Z,{value:"example",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"void autonomous() {\r\n  chassis.drive_imu_reset(); \r\n  chassis.drive_sensor_reset(); \r\n  chassis.drive_brake_set(MOTOR_BRAKE_HOLD); \r\n\r\n  chassis.slew_swing_constants_forward_set(7_deg, 50);\r\n\r\n  chassis.pid_swing_set(ez::LEFT_SWING, 90_deg, 110, 0, true);\r\n  chassis.pid_wait();\r\n}\n"})})}),(0,t.jsx)(l.Z,{value:"proto",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"void slew_swing_constants_forward_set(okapi::QAngle distance, int min_speed);\n"})})})]}),"\n",(0,t.jsx)(s.h3,{id:"slew_swing_constants_backward_set",children:"slew_swing_constants_backward_set()"}),"\n",(0,t.jsxs)(s.p,{children:["Sets constants for slew during backward swing turns.  Robot will start at ",(0,t.jsx)(s.code,{children:"min_speed"})," and will be at the maximum set speed once ",(0,t.jsx)(s.code,{children:"distance"})," is traveled."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"distance"})," is in an okapi length unit.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.code,{children:"min_speed"})," is 0 to 127."]}),"\n",(0,t.jsxs)(r.Z,{groupId:"slew_backward_swing_constants_set_okapi_distance",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(l.Z,{value:"example",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"void autonomous() {\r\n  chassis.drive_imu_reset(); \r\n  chassis.drive_sensor_reset(); \r\n  chassis.drive_brake_set(MOTOR_BRAKE_HOLD); \r\n\r\n  chassis.slew_swing_constants_backward_set(5_in, 50);\r\n\r\n  chassis.pid_swing_set(ez::LEFT_SWING, -90_deg, 110, 0, true);\r\n  chassis.pid_wait();\r\n}\n"})})}),(0,t.jsx)(l.Z,{value:"proto",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"void slew_swing_constants_backward_set(okapi::QLength distance, int min_speed);\n"})})})]}),"\n",(0,t.jsx)(s.h3,{id:"slew_swing_constants_backward_set-1",children:"slew_swing_constants_backward_set()"}),"\n",(0,t.jsxs)(s.p,{children:["Sets constants for slew during backward swing turns.  Robot will start at ",(0,t.jsx)(s.code,{children:"min_speed"})," and will be at the maximum set speed once ",(0,t.jsx)(s.code,{children:"distance"})," is traveled."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"distance"})," is in an okapi angle unit.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.code,{children:"min_speed"})," is 0 to 127."]}),"\n",(0,t.jsxs)(r.Z,{groupId:"slew_bakward_swing_constants_set_okapi_angle",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(l.Z,{value:"example",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"void autonomous() {\r\n  chassis.drive_imu_reset(); \r\n  chassis.drive_sensor_reset(); \r\n  chassis.drive_brake_set(MOTOR_BRAKE_HOLD); \r\n\r\n  chassis.slew_swing_constants_backward_set(7_deg, 50);\r\n\r\n  chassis.pid_swing_set(ez::LEFT_SWING, -90_deg, 110, 0, true);\r\n  chassis.pid_wait();\r\n}\n"})})}),(0,t.jsx)(l.Z,{value:"proto",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"void slew_swing_constants_backward_set(okapi::QAngle distance, int min_speed);\n"})})})]}),"\n",(0,t.jsx)(s.h2,{id:"slew-class",children:"Slew Class"}),"\n",(0,t.jsx)(s.h3,{id:"slew",children:"slew()"}),"\n",(0,t.jsxs)(s.p,{children:["Creates a slew object with constants.  Robot will start at ",(0,t.jsx)(s.code,{children:"min_speed"})," and will be at the maximum set speed once ",(0,t.jsx)(s.code,{children:"distance"})," is traveled."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"distance"})," distance to travel until maximum speed is reached.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.code,{children:"minimum_speed"})," starting speed."]}),"\n",(0,t.jsxs)(r.Z,{groupId:"slew",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(l.Z,{value:"example",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"ez::slew lift_Slew(100, 60);\n"})})}),(0,t.jsx)(l.Z,{value:"proto",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"slew(double distance, int minimum_speed);\n"})})})]}),"\n",(0,t.jsx)(s.h3,{id:"constants_set",children:"constants_set()"}),"\n",(0,t.jsx)(s.p,{children:"Sets slew constants."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"distance"})," distance to travel until maximum speed is reached.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.code,{children:"minimum_speed"})," starting speed."]}),"\n",(0,t.jsxs)(r.Z,{groupId:"set_constants",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(l.Z,{value:"example",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"PID lift_slew;\r\nvoid initialize() {\r\n  lift_slew.constants_set(100, 50);\r\n}\n"})})}),(0,t.jsx)(l.Z,{value:"proto",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"void constants_set(double distance, int minimum_speed);\n"})})})]}),"\n",(0,t.jsx)(s.h3,{id:"initialize",children:"initialize()"}),"\n",(0,t.jsx)(s.p,{children:"Setup for slew.  Keeps track of where the starting sensor value is and what the maximum target speed is."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"enabled"})," true if you want slew to run, false if you don't.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.code,{children:"maximum_speed"})," the target speed for the robot to reach.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.code,{children:"target"})," the distance to reach before max speed is hit.",(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.code,{children:"current"})," the current sensor value."]}),"\n",(0,t.jsxs)(r.Z,{groupId:"slew_init",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(l.Z,{value:"example",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"PID lift_slew;\r\npros::Motor lift(1);\r\nvoid initialize() {\r\n  lift_slew.constants_set(100, 50);\r\n  lift_slew.initialize(true, 127, 500, lift.get_position());\r\n}\n"})})}),(0,t.jsx)(l.Z,{value:"proto",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"void initialize(bool enabled, double maximum_speed, double target, double current);\n"})})})]}),"\n",(0,t.jsx)(s.h3,{id:"iterate",children:"iterate()"}),"\n",(0,t.jsx)(s.p,{children:"Iterates slew calculation and returns what the current max speed should be."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"current"})," the current sensor value."]}),"\n",(0,t.jsxs)(r.Z,{groupId:"slew_iterate",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(l.Z,{value:"example",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"PID lift_slew;\r\npros::Motor lift(1);\r\nvoid initialize() {\r\n  lift_slew.constants_set(100, 50);\r\n  lift_slew.initialize(true, 127, 500, lift.get_position());\r\n}\r\n\r\nvoid autonomous() {\r\n  while (lift.get_position() <= 500) {\r\n    lift = lift_slew.iterate(lift.get_position();\r\n    pros::delay(10);\r\n  }\r\n  lift = 0;\r\n}\n"})})}),(0,t.jsx)(l.Z,{value:"proto",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"double iterate(double current);\n"})})})]}),"\n",(0,t.jsx)(s.h3,{id:"output",children:"output()"}),"\n",(0,t.jsx)(s.p,{children:"Returns what the current max speed should be."}),"\n",(0,t.jsxs)(r.Z,{groupId:"slew_output",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(l.Z,{value:"example",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"PID lift_slew;\r\npros::Motor lift(1);\r\nvoid initialize() {\r\n  lift_slew.constants_set(100, 50);\r\n  lift_slew.initialize(true, 127, 500, lift.get_position());\r\n}\r\n\r\nvoid autonomous() {\r\n  while (lift.get_position() <= 500) {\r\n    lift_slew.iterate(lift.get_position();\r\n    lift = lift_slew.output();\r\n    pros::delay(10);\r\n  }\r\n  lift = 0;\r\n}\n"})})}),(0,t.jsx)(l.Z,{value:"proto",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"double output();\n"})})})]}),"\n",(0,t.jsx)(s.h3,{id:"enabled",children:"enabled()"}),"\n",(0,t.jsx)(s.p,{children:"Returns if slew is currently active or not."}),"\n",(0,t.jsxs)(r.Z,{groupId:"slew_enabled",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(l.Z,{value:"example",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:'PID lift_slew;\r\npros::Motor lift(1);\r\nvoid initialize() {\r\n  lift_slew.constants_set(100, 50);\r\n  lift_slew.initialize(true, 127, 500, lift.get_position());\r\n}\r\n\r\nvoid autonomous() {\r\n  printf("Slew Enabled? %f\\n", lift_slew.enabled()); // Returns true\r\n  while (lift.get_position() <= 500) {\r\n    lift_slew.iterate(lift.get_position();\r\n    lift = lift_slew.output();\r\n    pros::delay(10);\r\n  }\r\n  lift = 0;\r\n  printf("Slew Enabled? %f\\n", lift_slew.enabled()); // Returns false\r\n}\n'})})}),(0,t.jsx)(l.Z,{value:"proto",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-cpp",children:"double output();\n"})})})]})]})}function p(e={}){const{wrapper:s}={...(0,a.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(_,{...e})}):_(e)}},5162:(e,s,n)=>{n.d(s,{Z:()=>l});n(7294);var t=n(6010);const a={tabItem:"tabItem_Ymn6"};var r=n(5893);function l(e){let{children:s,hidden:n,className:l}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,t.Z)(a.tabItem,l),hidden:n,children:s})}},4866:(e,s,n)=>{n.d(s,{Z:()=>f});var t=n(7294),a=n(6010),r=n(2466),l=n(6550),i=n(469),d=n(1980),o=n(7392),c=n(12);function u(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:s}=e;return!!s&&"object"==typeof s&&"value"in s}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function _(e){const{values:s,children:n}=e;return(0,t.useMemo)((()=>{const e=s??function(e){return u(e).map((e=>{let{props:{value:s,label:n,attributes:t,default:a}}=e;return{value:s,label:n,attributes:t,default:a}}))}(n);return function(e){const s=(0,o.l)(e,((e,s)=>e.value===s.value));if(s.length>0)throw new Error(`Docusaurus error: Duplicate values "${s.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[s,n])}function p(e){let{value:s,tabValues:n}=e;return n.some((e=>e.value===s))}function h(e){let{queryString:s=!1,groupId:n}=e;const a=(0,l.k6)(),r=function(e){let{queryString:s=!1,groupId:n}=e;if("string"==typeof s)return s;if(!1===s)return null;if(!0===s&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:s,groupId:n});return[(0,d._X)(r),(0,t.useCallback)((e=>{if(!r)return;const s=new URLSearchParams(a.location.search);s.set(r,e),a.replace({...a.location,search:s.toString()})}),[r,a])]}function w(e){const{defaultValue:s,queryString:n=!1,groupId:a}=e,r=_(e),[l,d]=(0,t.useState)((()=>function(e){let{defaultValue:s,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(s){if(!p({value:s,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${s}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return s}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:s,tabValues:r}))),[o,u]=h({queryString:n,groupId:a}),[w,x]=function(e){let{groupId:s}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(s),[a,r]=(0,c.Nk)(n);return[a,(0,t.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),m=(()=>{const e=o??w;return p({value:e,tabValues:r})?e:null})();(0,i.Z)((()=>{m&&d(m)}),[m]);return{selectedValue:l,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);d(e),u(e),x(e)}),[u,x,r]),tabValues:r}}var x=n(2389);const m={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=n(5893);function j(e){let{className:s,block:n,selectedValue:t,selectValue:l,tabValues:i}=e;const d=[],{blockElementScrollPositionUntilNextRender:o}=(0,r.o5)(),c=e=>{const s=e.currentTarget,n=d.indexOf(s),a=i[n].value;a!==t&&(o(s),l(a))},u=e=>{let s=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;s=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;s=d[n]??d[d.length-1];break}}s?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":n},s),children:i.map((e=>{let{value:s,label:n,attributes:r}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:t===s?0:-1,"aria-selected":t===s,ref:e=>d.push(e),onKeyDown:u,onClick:c,...r,className:(0,a.Z)("tabs__item",m.tabItem,r?.className,{"tabs__item--active":t===s}),children:n??s},s)}))})}function g(e){let{lazy:s,children:n,selectedValue:a}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(s){const e=r.find((e=>e.props.value===a));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:r.map(((e,s)=>(0,t.cloneElement)(e,{key:s,hidden:e.props.value!==a})))})}function b(e){const s=w(e);return(0,v.jsxs)("div",{className:(0,a.Z)("tabs-container",m.tabList),children:[(0,v.jsx)(j,{...e,...s}),(0,v.jsx)(g,{...e,...s})]})}function f(e){const s=(0,x.Z)();return(0,v.jsx)(b,{...e,children:u(e.children)},String(s))}},1151:(e,s,n)=>{n.d(s,{Z:()=>i,a:()=>l});var t=n(7294);const a={},r=t.createContext(a);function l(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);
"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4243],{7091:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>u,toc:()=>c});var t=r(5893),i=r(1151),s=r(4866),a=r(5162);const l={layout:"default",title:"PID Tuner",parent:"Docs",description:"",nav_order:4},o=void 0,u={id:"docs/pid_tuner",title:"PID Tuner",description:"",source:"@site/ez-template-docs/docs/pid_tuner.md",sourceDirName:"docs",slug:"/docs/pid_tuner",permalink:"/EZ-Template/docs/pid_tuner",draft:!1,unlisted:!1,editUrl:"https://github.com/EZ-Robotics/EZ-Template/tree/website/ez-template-docs/docs/pid_tuner.md",tags:[],version:"current",frontMatter:{layout:"default",title:"PID Tuner",parent:"Docs",description:"",nav_order:4},sidebar:"docs",previous:{title:"PID",permalink:"/EZ-Template/docs/pid"},next:{title:"PTO",permalink:"/EZ-Template/docs/pto"}},d={},c=[{value:"Setter Functions",id:"setter-functions",level:2},{value:"pid_tuner_enable()",id:"pid_tuner_enable",level:3},{value:"pid_tuner_disable()",id:"pid_tuner_disable",level:3},{value:"pid_tuner_toggle()",id:"pid_tuner_toggle",level:3},{value:"pid_tuner_iterate()",id:"pid_tuner_iterate",level:3},{value:"pid_tuner_print_brain_set()",id:"pid_tuner_print_brain_set",level:3},{value:"pid_tuner_print_terminal_set()",id:"pid_tuner_print_terminal_set",level:3},{value:"pid_tuner_increment_p_set()",id:"pid_tuner_increment_p_set",level:3},{value:"pid_tuner_increment_i_set()",id:"pid_tuner_increment_i_set",level:3},{value:"pid_tuner_increment_d_set()",id:"pid_tuner_increment_d_set",level:3},{value:"pid_tuner_increment_start_i_set()",id:"pid_tuner_increment_start_i_set",level:3},{value:"Getter Functions",id:"getter-functions",level:2},{value:"pid_tuner_enabled()",id:"pid_tuner_enabled",level:3},{value:"pid_tuner_print_terminal_enabled()",id:"pid_tuner_print_terminal_enabled",level:3},{value:"pid_tuner_print_brain_enabled()",id:"pid_tuner_print_brain_enabled",level:3},{value:"pid_tuner_increment_p_get()",id:"pid_tuner_increment_p_get",level:3},{value:"pid_tuner_increment_i_set()",id:"pid_tuner_increment_i_set-1",level:3},{value:"pid_tuner_increment_d_set()",id:"pid_tuner_increment_d_set-1",level:3},{value:"pid_tuner_increment_start_i_set()",id:"pid_tuner_increment_start_i_set-1",level:3}];function _(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"setter-functions",children:"Setter Functions"}),"\n",(0,t.jsx)(n.h3,{id:"pid_tuner_enable",children:"pid_tuner_enable()"}),"\n",(0,t.jsx)(n.p,{children:"Enables PID Tuner."}),"\n",(0,t.jsxs)(s.Z,{groupId:"pid_tuner_enable",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(a.Z,{value:"example",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void opcontrol() {\r\n  // This is preference to what you like to drive on\r\n  chassis.drive_brake_set(MOTOR_BRAKE_COAST);\r\n\r\n  // Enable PID Tuner\r\n  chassis.pid_tuner_enable();\r\n  \r\n  while (true) {\r\n        \r\n    // Trigger the selected autonomous routine\r\n    if (master.get_digital_new_press(DIGITAL_B)) \r\n      autonomous();\r\n\r\n    chassis.pid_tuner_iterate(); // Allow PID Tuner to iterate\r\n\r\n    chassis.opcontrol_tank(); // Tank control\r\n\r\n    pros::delay(ez::util::DELAY_TIME); // This is used for timer calculations!  Keep this ez::util::DELAY_TIME\r\n  }\r\n}\n"})})}),(0,t.jsx)(a.Z,{value:"proto",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void pid_tuner_enable();\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"pid_tuner_disable",children:"pid_tuner_disable()"}),"\n",(0,t.jsx)(n.p,{children:"Disables PID Tuner."}),"\n",(0,t.jsxs)(s.Z,{groupId:"pid_tuner_disbale",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(a.Z,{value:"example",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void opcontrol() {\r\n  // This is preference to what you like to drive on\r\n  chassis.drive_brake_set(MOTOR_BRAKE_COAST);\r\n\r\n  // Enable PID Tuner\r\n  chassis.pid_tuner_enable();\r\n  \r\n  while (true) {\r\n        \r\n    // Trigger the selected autonomous routine\r\n    if (master.get_digital_new_press(DIGITAL_B)) \r\n      autonomous();\r\n\r\n    // Disable PID Tuner\r\n    if (master.get_digital_new_press(DIGITAL_X)) \r\n      chassis.pid_tuner_disable();\r\n\r\n    chassis.pid_tuner_iterate(); // Allow PID Tuner to iterate\r\n\r\n    chassis.opcontrol_tank(); // Tank control\r\n\r\n    pros::delay(ez::util::DELAY_TIME); // This is used for timer calculations!  Keep this ez::util::DELAY_TIME\r\n  }\r\n}\n"})})}),(0,t.jsx)(a.Z,{value:"proto",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void pid_tuner_disable();\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"pid_tuner_toggle",children:"pid_tuner_toggle()"}),"\n",(0,t.jsx)(n.p,{children:"Toggles PID Tuner.  If it's enabled, it will disable.  If it's disabled, it will enable."}),"\n",(0,t.jsxs)(s.Z,{groupId:"pid_tuner_toggle",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(a.Z,{value:"example",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void opcontrol() {\r\n  // This is preference to what you like to drive on\r\n  chassis.drive_brake_set(MOTOR_BRAKE_COAST);\r\n  \r\n  while (true) {\r\n    \r\n    // PID Tuner\r\n    // After you find values that you're happy with, you'll have to set them in auton.cpp\r\n    if (!pros::competition::is_connected()) { \r\n      // Enable / Disable PID Tuner\r\n      if (master.get_digital_new_press(DIGITAL_X)) \r\n        chassis.pid_tuner_toggle();\r\n        \r\n      // Trigger the selected autonomous routine\r\n      if (master.get_digital_new_press(DIGITAL_B)) \r\n        autonomous();\r\n\r\n      chassis.pid_tuner_iterate(); // Allow PID Tuner to iterate\r\n    } \r\n\r\n    chassis.opcontrol_tank(); // Tank control\r\n\r\n    pros::delay(ez::util::DELAY_TIME); // This is used for timer calculations!  Keep this ez::util::DELAY_TIME\r\n  }\r\n}\n"})})}),(0,t.jsx)(a.Z,{value:"proto",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void pid_tuner_toggle();\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"pid_tuner_iterate",children:"pid_tuner_iterate()"}),"\n",(0,t.jsx)(n.p,{children:"Iterates through PID Tuner to allow gui navigation and constant changing."}),"\n",(0,t.jsxs)(s.Z,{groupId:"pid_tuner_iterate",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(a.Z,{value:"example",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void opcontrol() {\r\n  // This is preference to what you like to drive on\r\n  chassis.drive_brake_set(MOTOR_BRAKE_COAST);\r\n  \r\n  while (true) {\r\n    \r\n    // PID Tuner\r\n    // After you find values that you're happy with, you'll have to set them in auton.cpp\r\n    if (!pros::competition::is_connected()) { \r\n      // Enable / Disable PID Tuner\r\n      if (master.get_digital_new_press(DIGITAL_X)) \r\n        chassis.pid_tuner_toggle();\r\n        \r\n      // Trigger the selected autonomous routine\r\n      if (master.get_digital_new_press(DIGITAL_B)) \r\n        autonomous();\r\n\r\n      chassis.pid_tuner_iterate(); // Allow PID Tuner to iterate\r\n    } \r\n\r\n    chassis.opcontrol_tank(); // Tank control\r\n\r\n    pros::delay(ez::util::DELAY_TIME); // This is used for timer calculations!  Keep this ez::util::DELAY_TIME\r\n  }\r\n}\n"})})}),(0,t.jsx)(a.Z,{value:"proto",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void pid_tuner_iterate();\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"pid_tuner_print_brain_set",children:"pid_tuner_print_brain_set()"}),"\n",(0,t.jsxs)(n.p,{children:["Enables or disables the PID Tuner from printing to the brain screen.  To use the PID Tuner, this or ",(0,t.jsx)(n.code,{children:"pid_tuner_print_terminal_set()"})," must be set to true."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"input"})," true enables printing to brain, false disables."]}),"\n",(0,t.jsxs)(s.Z,{groupId:"pid_tuner_print_brain_set",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(a.Z,{value:"example",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void opcontrol() {\r\n  // This is preference to what you like to drive on\r\n  chassis.drive_brake_set(MOTOR_BRAKE_COAST);\r\n\r\n  chassis.pid_tuner_print_brain_set(true);\r\n  \r\n  while (true) {\r\n    \r\n    // PID Tuner\r\n    // After you find values that you're happy with, you'll have to set them in auton.cpp\r\n    if (!pros::competition::is_connected()) { \r\n      // Enable / Disable PID Tuner\r\n      if (master.get_digital_new_press(DIGITAL_X)) \r\n        chassis.pid_tuner_toggle();\r\n        \r\n      // Trigger the selected autonomous routine\r\n      if (master.get_digital_new_press(DIGITAL_B)) \r\n        autonomous();\r\n\r\n      chassis.pid_tuner_iterate(); // Allow PID Tuner to iterate\r\n    } \r\n\r\n    chassis.opcontrol_tank(); // Tank control\r\n\r\n    pros::delay(ez::util::DELAY_TIME); // This is used for timer calculations!  Keep this ez::util::DELAY_TIME\r\n  }\r\n}\n"})})}),(0,t.jsx)(a.Z,{value:"proto",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void pid_tuner_print_brain_set(bool input);\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"pid_tuner_print_terminal_set",children:"pid_tuner_print_terminal_set()"}),"\n",(0,t.jsxs)(n.p,{children:["Enables or disables the PID Tuner from printing to the terminal.  To use the PID Tuner, this or ",(0,t.jsx)(n.code,{children:"pid_tuner_print_brain_set()"})," must be set to true."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"input"})," true enables printing to terminal, false disables."]}),"\n",(0,t.jsxs)(s.Z,{groupId:"pid_tuner_print_terminal_set",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(a.Z,{value:"example",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void opcontrol() {\r\n  // This is preference to what you like to drive on\r\n  chassis.drive_brake_set(MOTOR_BRAKE_COAST);\r\n\r\n  chassis.pid_tuner_print_terminal_set(true);\r\n  \r\n  while (true) {\r\n    \r\n    // PID Tuner\r\n    // After you find values that you're happy with, you'll have to set them in auton.cpp\r\n    if (!pros::competition::is_connected()) { \r\n      // Enable / Disable PID Tuner\r\n      if (master.get_digital_new_press(DIGITAL_X)) \r\n        chassis.pid_tuner_toggle();\r\n        \r\n      // Trigger the selected autonomous routine\r\n      if (master.get_digital_new_press(DIGITAL_B)) \r\n        autonomous();\r\n\r\n      chassis.pid_tuner_iterate(); // Allow PID Tuner to iterate\r\n    } \r\n\r\n    chassis.opcontrol_tank(); // Tank control\r\n\r\n    pros::delay(ez::util::DELAY_TIME); // This is used for timer calculations!  Keep this ez::util::DELAY_TIME\r\n  }\r\n}\n"})})}),(0,t.jsx)(a.Z,{value:"proto",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void pid_tuner_print_terminal_set(bool input);\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"pid_tuner_increment_p_set",children:"pid_tuner_increment_p_set()"}),"\n",(0,t.jsx)(n.p,{children:"Sets the amount that P will change when increasing or decreasing it."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"p"})," new value to increment and decrement by."]}),"\n",(0,t.jsxs)(s.Z,{groupId:"set_p_increment",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(a.Z,{value:"example",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void opcontrol() {\r\n  // This is preference to what you like to drive on\r\n  chassis.drive_brake_set(MOTOR_BRAKE_COAST);\r\n\r\n  chassis.pid_tuner_increment_p_set(0.25);\r\n  \r\n  while (true) {\r\n    \r\n    // PID Tuner\r\n    // After you find values that you're happy with, you'll have to set them in auton.cpp\r\n    if (!pros::competition::is_connected()) { \r\n      // Enable / Disable PID Tuner\r\n      if (master.get_digital_new_press(DIGITAL_X)) \r\n        chassis.pid_tuner_toggle();\r\n        \r\n      // Trigger the selected autonomous routine\r\n      if (master.get_digital_new_press(DIGITAL_B)) \r\n        autonomous();\r\n\r\n      chassis.pid_tuner_iterate(); // Allow PID Tuner to iterate\r\n    } \r\n\r\n    chassis.opcontrol_tank(); // Tank control\r\n\r\n    pros::delay(ez::util::DELAY_TIME); // This is used for timer calculations!  Keep this ez::util::DELAY_TIME\r\n  }\r\n}\n"})})}),(0,t.jsx)(a.Z,{value:"proto",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void pid_tuner_increment_p_set(double p);\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"pid_tuner_increment_i_set",children:"pid_tuner_increment_i_set()"}),"\n",(0,t.jsx)(n.p,{children:"Sets the amount that I will change when increasing or decreasing it."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"i"})," new value to increment and decrement by."]}),"\n",(0,t.jsxs)(s.Z,{groupId:"set_i_increment",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(a.Z,{value:"example",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void opcontrol() {\r\n  // This is preference to what you like to drive on\r\n  chassis.drive_brake_set(MOTOR_BRAKE_COAST);\r\n\r\n  chassis.pid_tuner_increment_i_set(0.25);\r\n  \r\n  while (true) {\r\n    \r\n    // PID Tuner\r\n    // After you find values that you're happy with, you'll have to set them in auton.cpp\r\n    if (!pros::competition::is_connected()) { \r\n      // Enable / Disable PID Tuner\r\n      if (master.get_digital_new_press(DIGITAL_X)) \r\n        chassis.pid_tuner_toggle();\r\n        \r\n      // Trigger the selected autonomous routine\r\n      if (master.get_digital_new_press(DIGITAL_B)) \r\n        autonomous();\r\n\r\n      chassis.pid_tuner_iterate(); // Allow PID Tuner to iterate\r\n    } \r\n\r\n    chassis.opcontrol_tank(); // Tank control\r\n\r\n    pros::delay(ez::util::DELAY_TIME); // This is used for timer calculations!  Keep this ez::util::DELAY_TIME\r\n  }\r\n}\n"})})}),(0,t.jsx)(a.Z,{value:"proto",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void pid_tuner_increment_i_set(double i);\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"pid_tuner_increment_d_set",children:"pid_tuner_increment_d_set()"}),"\n",(0,t.jsx)(n.p,{children:"Sets the amount that D will change when increasing or decreasing it."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"d"})," new value to increment and decrement by."]}),"\n",(0,t.jsxs)(s.Z,{groupId:"set_d_increment",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(a.Z,{value:"example",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void opcontrol() {\r\n  // This is preference to what you like to drive on\r\n  chassis.drive_brake_set(MOTOR_BRAKE_COAST);\r\n\r\n  chassis.pid_tuner_increment_d_set(1.0);\r\n  \r\n  while (true) {\r\n    \r\n    // PID Tuner\r\n    // After you find values that you're happy with, you'll have to set them in auton.cpp\r\n    if (!pros::competition::is_connected()) { \r\n      // Enable / Disable PID Tuner\r\n      if (master.get_digital_new_press(DIGITAL_X)) \r\n        chassis.pid_tuner_toggle();\r\n        \r\n      // Trigger the selected autonomous routine\r\n      if (master.get_digital_new_press(DIGITAL_B)) \r\n        autonomous();\r\n\r\n      chassis.pid_tuner_iterate(); // Allow PID Tuner to iterate\r\n    } \r\n\r\n    chassis.opcontrol_tank(); // Tank control\r\n\r\n    pros::delay(ez::util::DELAY_TIME); // This is used for timer calculations!  Keep this ez::util::DELAY_TIME\r\n  }\r\n}\n"})})}),(0,t.jsx)(a.Z,{value:"proto",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void pid_tuner_increment_d_set(double d);\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"pid_tuner_increment_start_i_set",children:"pid_tuner_increment_start_i_set()"}),"\n",(0,t.jsx)(n.p,{children:"Sets the amount that Start I will change when increasing or decreasing it."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"start_i"})," new value to increment and decrement by."]}),"\n",(0,t.jsxs)(s.Z,{groupId:"set_starti_increment",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(a.Z,{value:"example",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void opcontrol() {\r\n  // This is preference to what you like to drive on\r\n  chassis.drive_brake_set(MOTOR_BRAKE_COAST);\r\n\r\n  chassis.pid_tuner_increment_start_i_set(5.0);\r\n  \r\n  while (true) {\r\n    \r\n    // PID Tuner\r\n    // After you find values that you're happy with, you'll have to set them in auton.cpp\r\n    if (!pros::competition::is_connected()) { \r\n      // Enable / Disable PID Tuner\r\n      if (master.get_digital_new_press(DIGITAL_X)) \r\n        chassis.pid_tuner_toggle();\r\n        \r\n      // Trigger the selected autonomous routine\r\n      if (master.get_digital_new_press(DIGITAL_B)) \r\n        autonomous();\r\n\r\n      chassis.pid_tuner_iterate(); // Allow PID Tuner to iterate\r\n    } \r\n\r\n    chassis.opcontrol_tank(); // Tank control\r\n\r\n    pros::delay(ez::util::DELAY_TIME); // This is used for timer calculations!  Keep this ez::util::DELAY_TIME\r\n  }\r\n}\n"})})}),(0,t.jsx)(a.Z,{value:"proto",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void pid_tuner_increment_start_i_set(double start_i);\n"})})})]}),"\n",(0,t.jsx)(n.h2,{id:"getter-functions",children:"Getter Functions"}),"\n",(0,t.jsx)(n.h3,{id:"pid_tuner_enabled",children:"pid_tuner_enabled()"}),"\n",(0,t.jsx)(n.p,{children:"Returns the state of the PID Tuner.  True is enabled, false is disabled."}),"\n",(0,t.jsxs)(s.Z,{groupId:"pid_tuner_enabled",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(a.Z,{value:"example",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void opcontrol() {\r\n  // This is preference to what you like to drive on\r\n  chassis.drive_brake_set(MOTOR_BRAKE_COAST);\r\n  \r\n  while (true) {\r\n    \r\n    // PID Tuner\r\n    // After you find values that you're happy with, you'll have to set them in auton.cpp\r\n    if (!pros::competition::is_connected()) { \r\n      // Enable / Disable PID Tuner\r\n      if (master.get_digital_new_press(DIGITAL_X)) {\r\n        if (chassis.pid_tuner_enabled())\r\n          chassis.pid_tuner_disable();\r\n        else \r\n          chassis.pid_tuner_enable();\r\n      }\r\n        \r\n      // Trigger the selected autonomous routine\r\n      if (master.get_digital_new_press(DIGITAL_B)) \r\n        autonomous();\r\n\r\n      chassis.pid_tuner_iterate(); // Allow PID Tuner to iterate\r\n    } \r\n\r\n    chassis.opcontrol_tank(); // Tank control\r\n\r\n    pros::delay(ez::util::DELAY_TIME); // This is used for timer calculations!  Keep this ez::util::DELAY_TIME\r\n  }\r\n}\n"})})}),(0,t.jsx)(a.Z,{value:"proto",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"bool pid_tuner_enabled();\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"pid_tuner_print_terminal_enabled",children:"pid_tuner_print_terminal_enabled()"}),"\n",(0,t.jsx)(n.p,{children:"Returns the state of printing the PID Tuner to terminal.  True is enabled, false is disabled."}),"\n",(0,t.jsxs)(s.Z,{groupId:"pid_tuner_print_terminal_enabled",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(a.Z,{value:"example",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'void opcontrol() {\r\n  // This is preference to what you like to drive on\r\n  chassis.drive_brake_set(MOTOR_BRAKE_COAST);\r\n\r\n  chassis.pid_tuner_print_terminal_set(true);\r\n  printf("Printing to Terminal? %i\\n", chassis.pid_tuner_print_terminal_enabled()); // Prints true\r\n  chassis.pid_tuner_print_terminal_set(false);\r\n  printf("Printing to Terminal? %i\\n", chassis.pid_tuner_print_terminal_enabled()); // Prints false\r\n  \r\n  while (true) {\r\n    \r\n    // PID Tuner\r\n    // After you find values that you\'re happy with, you\'ll have to set them in auton.cpp\r\n    if (!pros::competition::is_connected()) { \r\n      // Enable / Disable PID Tuner\r\n      if (master.get_digital_new_press(DIGITAL_X)) {\r\n        if (chassis.pid_tuner_enabled())\r\n          chassis.pid_tuner_toggle();\r\n      }\r\n        \r\n      // Trigger the selected autonomous routine\r\n      if (master.get_digital_new_press(DIGITAL_B)) \r\n        autonomous();\r\n\r\n      chassis.pid_tuner_iterate(); // Allow PID Tuner to iterate\r\n    } \r\n\r\n    chassis.opcontrol_tank(); // Tank control\r\n\r\n    pros::delay(ez::util::DELAY_TIME); // This is used for timer calculations!  Keep this ez::util::DELAY_TIME\r\n  }\r\n}\n'})})}),(0,t.jsx)(a.Z,{value:"proto",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"bool pid_tuner_print_terminal_enabled();\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"pid_tuner_print_brain_enabled",children:"pid_tuner_print_brain_enabled()"}),"\n",(0,t.jsx)(n.p,{children:"Returns the state of printing the PID Tuner to the brain.  True is enabled, false is disabled."}),"\n",(0,t.jsxs)(s.Z,{groupId:"pid_tuner_print_brain_enabled",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(a.Z,{value:"example",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'void opcontrol() {\r\n  // This is preference to what you like to drive on\r\n  chassis.drive_brake_set(MOTOR_BRAKE_COAST);\r\n\r\n  chassis.pid_tuner_print_terminal_set(false);\r\n  printf("Printing to Terminal? %i\\n", chassis.pid_tuner_print_brain_enabled()); // Prints false\r\n  chassis.pid_tuner_print_terminal_set(true);\r\n  printf("Printing to Terminal? %i\\n", chassis.pid_tuner_print_brain_enabled()); // Prints true\r\n  \r\n  while (true) {\r\n    \r\n    // PID Tuner\r\n    // After you find values that you\'re happy with, you\'ll have to set them in auton.cpp\r\n    if (!pros::competition::is_connected()) { \r\n      // Enable / Disable PID Tuner\r\n      if (master.get_digital_new_press(DIGITAL_X)) {\r\n        if (chassis.pid_tuner_enabled())\r\n          chassis.pid_tuner_toggle();\r\n      }\r\n        \r\n      // Trigger the selected autonomous routine\r\n      if (master.get_digital_new_press(DIGITAL_B)) \r\n        autonomous();\r\n\r\n      chassis.pid_tuner_iterate(); // Allow PID Tuner to iterate\r\n    } \r\n\r\n    chassis.opcontrol_tank(); // Tank control\r\n\r\n    pros::delay(ez::util::DELAY_TIME); // This is used for timer calculations!  Keep this ez::util::DELAY_TIME\r\n  }\r\n}\n'})})}),(0,t.jsx)(a.Z,{value:"proto",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"bool pid_tuner_print_brain_enabled();\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"pid_tuner_increment_p_get",children:"pid_tuner_increment_p_get()"}),"\n",(0,t.jsx)(n.p,{children:"Returns the amount that P will change when increasing or decreasing it."}),"\n",(0,t.jsxs)(s.Z,{groupId:"get_p_increment",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(a.Z,{value:"example",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void opcontrol() {\r\n  // This is preference to what you like to drive on\r\n  chassis.drive_brake_set(MOTOR_BRAKE_COAST);\r\n\r\n  chassis.pid_tuner_increment_p_set(0.25);\r\n  printf(\"%f\\n\", chassis.pid_tuner_increment_p_get());\r\n  \r\n  while (true) {\r\n    \r\n    // PID Tuner\r\n    // After you find values that you're happy with, you'll have to set them in auton.cpp\r\n    if (!pros::competition::is_connected()) { \r\n      // Enable / Disable PID Tuner\r\n      if (master.get_digital_new_press(DIGITAL_X)) \r\n        chassis.pid_tuner_toggle();\r\n        \r\n      // Trigger the selected autonomous routine\r\n      if (master.get_digital_new_press(DIGITAL_B)) \r\n        autonomous();\r\n\r\n      chassis.pid_tuner_iterate(); // Allow PID Tuner to iterate\r\n    } \r\n\r\n    chassis.opcontrol_tank(); // Tank control\r\n\r\n    pros::delay(ez::util::DELAY_TIME); // This is used for timer calculations!  Keep this ez::util::DELAY_TIME\r\n  }\r\n}\n"})})}),(0,t.jsx)(a.Z,{value:"proto",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"double pid_tuner_increment_p_set();\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"pid_tuner_increment_i_set-1",children:"pid_tuner_increment_i_set()"}),"\n",(0,t.jsx)(n.p,{children:"Gets the amount that I will change when increasing or decreasing it."}),"\n",(0,t.jsxs)(s.Z,{groupId:"get_i_increment",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(a.Z,{value:"example",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void opcontrol() {\r\n  // This is preference to what you like to drive on\r\n  chassis.drive_brake_set(MOTOR_BRAKE_COAST);\r\n\r\n  chassis.pid_tuner_increment_i_set(0.25);\r\n  printf(\"%f\\n\", chassis.pid_tuner_increment_i_get());\r\n  \r\n  while (true) {\r\n    \r\n    // PID Tuner\r\n    // After you find values that you're happy with, you'll have to set them in auton.cpp\r\n    if (!pros::competition::is_connected()) { \r\n      // Enable / Disable PID Tuner\r\n      if (master.get_digital_new_press(DIGITAL_X)) \r\n        chassis.pid_tuner_toggle();\r\n        \r\n      // Trigger the selected autonomous routine\r\n      if (master.get_digital_new_press(DIGITAL_B)) \r\n        autonomous();\r\n\r\n      chassis.pid_tuner_iterate(); // Allow PID Tuner to iterate\r\n    } \r\n\r\n    chassis.opcontrol_tank(); // Tank control\r\n\r\n    pros::delay(ez::util::DELAY_TIME); // This is used for timer calculations!  Keep this ez::util::DELAY_TIME\r\n  }\r\n}\n"})})}),(0,t.jsx)(a.Z,{value:"proto",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"double pid_tuner_increment_i_set();\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"pid_tuner_increment_d_set-1",children:"pid_tuner_increment_d_set()"}),"\n",(0,t.jsx)(n.p,{children:"Gets the amount that D will change when increasing or decreasing it."}),"\n",(0,t.jsxs)(s.Z,{groupId:"get_d_increment",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(a.Z,{value:"example",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void opcontrol() {\r\n  // This is preference to what you like to drive on\r\n  chassis.drive_brake_set(MOTOR_BRAKE_COAST);\r\n\r\n  chassis.pid_tuner_increment_d_set(1.0);\r\n  printf(\"%f\\n\", chassis.pid_tuner_increment_d_get());\r\n  \r\n  while (true) {\r\n    \r\n    // PID Tuner\r\n    // After you find values that you're happy with, you'll have to set them in auton.cpp\r\n    if (!pros::competition::is_connected()) { \r\n      // Enable / Disable PID Tuner\r\n      if (master.get_digital_new_press(DIGITAL_X)) \r\n        chassis.pid_tuner_toggle();\r\n        \r\n      // Trigger the selected autonomous routine\r\n      if (master.get_digital_new_press(DIGITAL_B)) \r\n        autonomous();\r\n\r\n      chassis.pid_tuner_iterate(); // Allow PID Tuner to iterate\r\n    } \r\n\r\n    chassis.opcontrol_tank(); // Tank control\r\n\r\n    pros::delay(ez::util::DELAY_TIME); // This is used for timer calculations!  Keep this ez::util::DELAY_TIME\r\n  }\r\n}\n"})})}),(0,t.jsx)(a.Z,{value:"proto",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"double pid_tuner_increment_d_set();\n"})})})]}),"\n",(0,t.jsx)(n.h3,{id:"pid_tuner_increment_start_i_set-1",children:"pid_tuner_increment_start_i_set()"}),"\n",(0,t.jsx)(n.p,{children:"Gets the amount that Start I will change when increasing or decreasing it."}),"\n",(0,t.jsxs)(s.Z,{groupId:"get_starti_increment",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,t.jsx)(a.Z,{value:"example",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"void opcontrol() {\r\n  // This is preference to what you like to drive on\r\n  chassis.drive_brake_set(MOTOR_BRAKE_COAST);\r\n\r\n  chassis.pid_tuner_increment_start_i_set(5.0);\r\n  printf(\"%f\\n\", chassis.pid_tuner_increment_start_i_get());\r\n  \r\n  while (true) {\r\n    \r\n    // PID Tuner\r\n    // After you find values that you're happy with, you'll have to set them in auton.cpp\r\n    if (!pros::competition::is_connected()) { \r\n      // Enable / Disable PID Tuner\r\n      if (master.get_digital_new_press(DIGITAL_X)) \r\n        chassis.pid_tuner_toggle();\r\n        \r\n      // Trigger the selected autonomous routine\r\n      if (master.get_digital_new_press(DIGITAL_B)) \r\n        autonomous();\r\n\r\n      chassis.pid_tuner_iterate(); // Allow PID Tuner to iterate\r\n    } \r\n\r\n    chassis.opcontrol_tank(); // Tank control\r\n\r\n    pros::delay(ez::util::DELAY_TIME); // This is used for timer calculations!  Keep this ez::util::DELAY_TIME\r\n  }\r\n}\n"})})}),(0,t.jsx)(a.Z,{value:"proto",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"double pid_tuner_increment_start_i_set();\n"})})})]})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(_,{...e})}):_(e)}},5162:(e,n,r)=>{r.d(n,{Z:()=>a});r(7294);var t=r(6905);const i={tabItem:"tabItem_Ymn6"};var s=r(5893);function a(e){let{children:n,hidden:r,className:a}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,t.Z)(i.tabItem,a),hidden:r,children:n})}},4866:(e,n,r)=>{r.d(n,{Z:()=>I});var t=r(7294),i=r(6905),s=r(2466),a=r(6550),l=r(469),o=r(1980),u=r(7392),d=r(12);function c(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function _(e){const{values:n,children:r}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return c(e).map((e=>{let{props:{value:n,label:r,attributes:t,default:i}}=e;return{value:n,label:r,attributes:t,default:i}}))}(r);return function(e){const n=(0,u.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function p(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:r}=e;const i=(0,a.k6)(),s=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,o._X)(s),(0,t.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(i.location.search);n.set(s,e),i.replace({...i.location,search:n.toString()})}),[s,i])]}function m(e){const{defaultValue:n,queryString:r=!1,groupId:i}=e,s=_(e),[a,o]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=r.find((e=>e.default))??r[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s}))),[u,c]=h({queryString:r,groupId:i}),[m,g]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,s]=(0,d.Nk)(r);return[i,(0,t.useCallback)((e=>{r&&s.set(e)}),[r,s])]}({groupId:i}),v=(()=>{const e=u??m;return p({value:e,tabValues:s})?e:null})();(0,l.Z)((()=>{v&&o(v)}),[v]);return{selectedValue:a,selectValue:(0,t.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),c(e),g(e)}),[c,g,s]),tabValues:s}}var g=r(2389);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var T=r(5893);function b(e){let{className:n,block:r,selectedValue:t,selectValue:a,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:u}=(0,s.o5)(),d=e=>{const n=e.currentTarget,r=o.indexOf(n),i=l[r].value;i!==t&&(u(n),a(i))},c=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=o.indexOf(e.currentTarget)+1;n=o[r]??o[0];break}case"ArrowLeft":{const r=o.indexOf(e.currentTarget)-1;n=o[r]??o[o.length-1];break}}n?.focus()};return(0,T.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":r},n),children:l.map((e=>{let{value:n,label:r,attributes:s}=e;return(0,T.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>o.push(e),onKeyDown:c,onClick:d,...s,className:(0,i.Z)("tabs__item",v.tabItem,s?.className,{"tabs__item--active":t===n}),children:r??n},n)}))})}function x(e){let{lazy:n,children:r,selectedValue:i}=e;const s=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===i));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,T.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function f(e){const n=m(e);return(0,T.jsxs)("div",{className:(0,i.Z)("tabs-container",v.tabList),children:[(0,T.jsx)(b,{...e,...n}),(0,T.jsx)(x,{...e,...n})]})}function I(e){const n=(0,g.Z)();return(0,T.jsx)(f,{...e,children:c(e.children)},String(n))}},1151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>a});var t=r(7294);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);